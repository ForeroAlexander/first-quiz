diff --git a/first_quiz_submission.patch b/first_quiz_submission.patch
new file mode 100644
index 0000000..e69de29
diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..ed431bd 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,6 +20,8 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14
 
 def get_city_weather(city):
 
@@ -29,6 +31,8 @@ def get_city_weather(city):
      sky_condition = "cloudy"
   elif city == "New York":
      sky_condition = "rainy"
+  elif city == "Quito":
+     sky_condition = "sunny"
 
   temperature = get_city_temperature(city)
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..2913055 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,8 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+def swapper(tup):
+    return (tup[1], tup[0])
 
 def run_swapper(list_of_tuples):
-  return list(map(swapper, list_of_tuples))
\ No newline at end of file
+    return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..a5d8746 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -25,20 +25,49 @@
 # The `alchemy_combine()` function will use your oven. You can see the expected 
 # formulas and their outputs in the test file, `question3_test.py`.
 
-# This function should return an oven instance!
+# This function should return an oven instance!class Oven:class Oven:
+class Oven:
+    def __init__(self):
+        self.ingredients = []
+        self.output = None
+
+    def add(self, item):
+        self.ingredients.append(item)
+
+    def freeze(self):
+        if "water" in self.ingredients and "air" in self.ingredients:
+            self.output = "snow"
+
+    def boil(self):
+        if "lead" in self.ingredients and "mercury" in self.ingredients:
+            self.output = "gold"
+
+    def wait(self):
+        required_ingredients = ["cheese", "dough", "tomato"]
+        print("Ingredients in wait:", self.ingredients)
+        if all(ingredient in self.ingredients for ingredient in required_ingredients):
+            self.output = "pizza"
+        print("Output in wait:", self.output)
+
+    def get_output(self):
+        return self.output
+
 def make_oven():
-  None
+    return Oven()
 
 def alchemy_combine(oven, ingredients, temperature):
-  
-  for item in ingredients:
-    oven.add(item)
-
-  if temperature < 0:
-    oven.freeze()
-  elif temperature >= 100:
-    oven.boil()
-  else:
-    oven.wait()
-
-  return oven.get_output()
\ No newline at end of file
+
+    print("Ingredients:", ingredients)
+    print("Temperature:", temperature)
+    
+    for item in ingredients:
+        oven.add(item)
+
+    if temperature < 0:
+        oven.freeze()
+    elif temperature >= 5000:
+        oven.boil()
+    else:
+        oven.wait()
+    print("Output:", oven.get_output())
+    return oven.get_output()
\ No newline at end of file
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..c1018de 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import alchemy_combine, make_oven
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..e3484ee 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -23,26 +23,37 @@ import pets_db
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
 sql_pets_owned_by_nobody = """
-
-Your SQL here.
-
+SELECT name, species, age
+FROM animals
+WHERE animal_id NOT IN (SELECT pet_id FROM people_animals);
 """
 
 # Part 4.B:
 # Write SQL to select how the number of pets are older than their owners. 
 # The output should be an integer.
 
-sql_pets_older_than_owner = """
-
-Your SQL here.
-
+sql_pets_older_than_owner ="""
+SELECT COUNT(*) as count
+FROM animals a
+JOIN people_animals pa ON a.animal_id = pa.pet_id
+JOIN people p ON pa.owner_id = p.person_id
+WHERE a.age > p.age;
 """
 
 # Part 4.C: BONUS CHALLENGE! 
 # Write SQL to select the pets that are owned by Bessie and nobody else.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
-
-Your SQL here.
+SELECT p.name as person_name, a.name as pet_name, a.species
+FROM animals a
+JOIN people_animals pa ON a.animal_id = pa.pet_id
+JOIN people p ON pa.owner_id = p.person_id
+WHERE p.name = 'bessie'
+AND NOT EXISTS (
+    SELECT 1
+    FROM people_animals pa2
+    WHERE pa2.pet_id = pa.pet_id
+    AND pa2.owner_id != p.person_id
+);
 
 """
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..328c3e9 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -19,9 +19,11 @@
 # vegetarian integer
 
 sql_create_favorite_foods = """
-
-Your SQL here.
-
+CREATE TABLE favorite_foods (
+    food_id integer,
+    name text,
+    vegetarian integer
+);
 """
 
 # Part 5.B:
@@ -29,9 +31,11 @@ Your SQL here.
 # The test suite will verify the new changes by inserting some new rows. 
 
 sql_alter_tables_with_favorite_food = """
+ALTER TABLE animals
+ADD COLUMN favorite_food_id integer;
 
-Your SQL here.
-
+ALTER TABLE people
+ADD COLUMN favorite_food_id integer;
 """
 
 # Part 5.C:
@@ -39,7 +43,8 @@ Your SQL here.
 # THe output should be a list of tuples in the format: (<pet name>, <food name>)
 
 sql_select_all_vegetarian_pets = """
-
-Your SQL here.
-
+SELECT a.name as pet_name, ff.name as food_name
+FROM animals a
+JOIN favorite_foods ff ON a.favorite_food_id = ff.food_id
+WHERE ff.vegetarian = 1;
 """
\ No newline at end of file
diff --git a/part1/quiz_pets b/part1/quiz_pets
new file mode 100644
index 0000000..320fc30
Binary files /dev/null and b/part1/quiz_pets differ
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
new file mode 100644
index 0000000..10656a6
--- /dev/null
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
@@ -0,0 +1,21 @@
+package org.velezreyes.quiz.question6;
+
+public class DrinkImpl implements Drink {
+  private String name;
+  private boolean isFizzy;
+
+  public DrinkImpl(String name, boolean isFizzy) {
+    this.name = name;
+    this.isFizzy = isFizzy;
+  }
+
+  @Override
+  public String getName() {
+    return name;
+  }
+
+  @Override
+  public boolean isFizzy() {
+    return isFizzy;
+  }
+}
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..6169a96 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,43 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+public class VendingMachineImpl implements VendingMachine {
+  private int insertedAmount;  // Variable para rastrear la cantidad de dinero insertado.
+
+  @Override
+  public void insertQuarter() {
+    // Implementa el código para insertar un cuarto (25 centavos) en la máquina.
+    insertedAmount += 25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    // Implementa el código para procesar la selección de bebida.
+    // Asegúrate de manejar los casos de NotEnoughMoneyException y UnknownDrinkException.
+
+    if ("ScottCola".equals(name)) {
+      if (insertedAmount >= 75) {
+        // Si hay suficiente dinero, entrega la bebida "ScottCola" y réstale el costo.
+        insertedAmount -= 75;
+        return new DrinkImpl("ScottCola", true);
+      } else {
+        throw new NotEnoughMoneyException();
+      }
+    } else if ("KarenTea".equals(name)) {
+      if (insertedAmount >= 100) {
+        // Si hay suficiente dinero, entrega la bebida "KarenTea" y réstale el costo.
+        insertedAmount -= 100;
+        return new DrinkImpl("KarenTea", false);
+      } else {
+        throw new NotEnoughMoneyException();
+      }
+    } else {
+      // Si el nombre de la bebida no es reconocido, lanza una excepción UnknownDrinkException.
+      throw new UnknownDrinkException();
+    }
+  }
 
   public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+    // Retorna una instancia de la máquina expendedora.
+    return new VendingMachineImpl();
   }
 }
diff --git a/part2/src/test/java/org/velezreyes/quiz/Question6Test.java b/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
index eaf7fdd..0d284a5 100644
--- a/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
+++ b/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
@@ -43,7 +43,7 @@ public class Question6Test {
     assertTrue(drink.isFizzy());
     assertEquals(drink.getName(), "ScottCola");
   }
-
+  @Test
   public void machineResets() throws Exception {
     VendingMachine vm = VendingMachineImpl.getInstance();
 
